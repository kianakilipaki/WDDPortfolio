Chapter 8: Forms
Forms are the primary method used for entering data into a browser.

Forms have a variety of controls that are used for entering different types of information.

HTML5 has a large number of new input types that are beginning to be implemented in modern browsers.

 document.forms will return an HTML collection of all the forms on a page.

 form.elements will return an HTML collection of all the elements contained within a form.

Forms have focus , blur , and change events that fire as a user interacts with the form.

Forms also have a submit event that can be used to intercept a form before it’s been submitted.

The information entered into a form can be read or updated using the value property of the form controls.

The HTML5 form validation API can be used to automatically validate a form, but only at a basic level, so a custom validation script may be required.


Chapter 12 - OOP
Object-oriented programming (OOP) is a way of programming that uses objects that encapsulate their own properties and methods.

The main concepts of OOP are encapsulation, polymorphism and inheritance.

Constructor functions can be used to create instances of objects.

ES6 introduced class declarations that use the class keyword. These can be used in place of constructor functions.

Inside a constructor function or class declaration, the keyword this refers to the object returned by the function.

All instances of a class or constructor function inherit all the properties and methods of its prototype.

The prototype is live, so new properties and methods can be added to existing instances.

The prototype chain is used to find an available method. If an object lacks a method, JavaScript will check whether its prototype has the method. If not, it will check that function’s prototype until it finds the method or reaches the Object constructor function.

Private properties and methods can be created by defining variables using const and defining a function inside a constructor function. These can be made public using getter and setter functions.

Monkey-patching is the process of adding methods to built-in objects by augmenting their prototypes. This should be done with caution as it can cause unexpected behavior in the way built-in objects work.

A mixin method can be used to add properties and methods from other objects without creating an inheritance chain.

Methods can be chained together and called in sequence if they return a reference to this.

Polymorphism allows objects to override shared methods with a more specific implementation.

The value of this is not retained inside nested functions, which can cause errors. This can be worked around by using that = this , using the bind(this) method and using arrow functions.

Methods can be borrowed from other objects.

Composition over inheritance is a design pattern where objects are composed from 'building-block' objects, rather than inheriting all their properties and methods from a parent class.

Modular Programming:
A module is a self-contained piece of code that provides functions and methods that can then be used in other files and by other modules.

ES6 added support for modules, allowing code to be abstracted into their own self-contained files and imported into another file.

The MVC pattern is used to organize code into distinct sections that are responsible for different elements of an application.