Transitions and transforms

transform: translate(45px, -45px);
transform: scale(1.5, 0.25);
.ad-ad2 h1:hover span {
    color: #484848;
    transform: rotate(10deg) translateX(40px) scale(1.5);
}
transform: skew(15deg, 4deg);
transform-origin: 0 0;
Declare the original state of the element in the default style declaration.

Declare the final state of your transitioned element; for example, a :hover state.

Include the transition functions in your default style declaration using the transition properties, including: transition-property , transition-duration , transition-timing-function , and transition-delay . We’ll look at each of these and how they work shortly.
transition-timing-function: ease-out;

.ad-ad2 h1 span {
    transition-property: transform; 
    transition-duration: 0.2s;  
    transition-timing-function: ease-out;
    transition-delay: 50ms;
}
.ad-ad2 h1 span {
    transition: transform 0.2s ease-out 50ms;
}

transition: transform 0.2s ease-out 50ms, color 0.1s linear 50ms;

@keyframes moveRight { 
    from {
    transform: translateX(-50%);
    }
    to {
    transform: translateX(50%);
    }
}
@keyframes appearDisappear { 
    0%, 100% {
    opacity: 0;
    }
    20%, 80% {
    opacity: 1;
    }
}
@keyframes bgMove {
    100% {
    background-position: 120% 0;
    }
}

Like the transition-timing-function property, the animation-timing-function determines how the animation will progress over its duration. The options are the same as for transition-timing-function : ease , linear , ease-in , ease-out , ease-in-out , a developer-defined cubic-bezier() function, step-start , step-end , or a developer-defined number of steps with the steps(number, direction) function:

.verbose {
    animation-name: appearDisappear; 
    animation-duration: 300ms; 
    animation-timing-function: ease-in;
    animation-iteration-count: 1;
    animation-direction: alternate;
    animation-delay: 5s;
    animation-fill-mode: backwards;
    animation-play-state: running;
}
/* shorthand */
.concise {
    animation: 300ms ease-in alternate 5s backwards appearDisappear;
}

Canvas, SVG, Drag and Drop
With HTML5’s Canvas API, we can draw anything we can imagine, all through JavaScript. This can improve the performance of our websites by avoiding the need to download images off the network. With canvas, we can draw shapes and lines, arcs and text, gradients and patterns. In addition, canvas gives us the power to manipulate pixels in images and even video.
<canvas id="myCanvas" class="myCanvas" width="200" height="200">
    Sorry! Your browser doesn’t support Canvas.
</canvas>

function drawPattern() {
    …
    var img = new Image();
    img.src = "../images/bg-bike.png";
    img.onload = function() {
    var pattern = context.createPattern(img, "repeat"); 
    context.fillStyle = pattern;                        
    context.fillRect(10, 10, 100, 100);                  
    context.strokeRect(10, 10, 100, 100);             
    };
}


SVG
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 400">
    <circle cx="50" cy="50" r="25" fill="red"/>
</svg>

<svg xmlns="http://www.w3.org/2000/svg"    
    width="122.88545" height="114.88568">
<g
    inkscape:label="Calque 1"
    inkscape:groupmode="layer"
    id="layer1"
    transform="translate(-242.42282,-449.03699)">
    <g
    transform="matrix(0.72428496,0,0,0.72428496,119.87078,183.8127)"
    id="g7153">
    <path
        style="fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width
↵:2.761343;stroke-linecap:round;stroke-linejoin:round;stroke-miterl
↵imit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
        d="m 249.28667,389.00422 -9.7738,30.15957 -31.91999,7.5995 c -
↵2.74681,1.46591 -5.51239,2.92436 -1.69852,6.99979 l 30.15935,12.57
↵796 -11.80876,32.07362 c -1.56949,4.62283 -0.21957,6.36158 4.24212
↵,3.35419 l 26.59198,-24.55691 30.9576,17.75909 c 3.83318,2.65893 6
↵.12086,0.80055 5.36349,-3.57143 l -12.10702,-34.11764 22.72561,-13
↵.7066 c 2.32805,-1.03398 5.8555,-6.16054 -0.46651,-6.46042 l -33.5
↵0135,-0.66887 -11.69597,-27.26175 c -2.04282,-3.50583 -4.06602,-7.
↵22748 -7.06823,-0.1801 z"
        id="path7155"
        inkscape:connector-curvature="0"
        sodipodi:nodetypes="cccccccccccccccc" />
…

mouse.addEventListener("dragstart", function (event) {
    event.dataTransfer.setData("text/plain", this.id); 
});

var cat = document.getElementById("cat");
cat.addEventListener("dragover", function(event) {
    event.preventDefault();
});

cat.addEventListener("drop", function(event) {
    var mouseHash = {
    mouse1: 'NOMNOMNOM',
    mouse2: 'Meow',
    mouse3: 'Purrrrrr ...'
    };
}